# bfs
class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        visited = set()
        res = 0
        for i in range(n):
            if i not in visited:
                Q = collections.deque([i])
                while Q:
                    j = Q.popleft()
                    visited.add(j)
                    for k in range(n):
                        if isConnected[j][k] == 1 and k not in visited:
                            Q.append(k)
                res += 1
        return res

# dfs
class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)
        res = 0
        def dfs(i,j):
            if i < 0 or i > n - 1:
                return
            if j < 0 or j > n - 1:
                return
            if isConnected[i][j] == 1:
                isConnected[i][j] = 0
                isConnected[j][i] = 0
                dfs(j,0)
            dfs(i,j+1)
        for k in range(n):
            for l in range(n):
                if isConnected[k][l] == 1:
                    dfs(k,l)
                    res += 1
        return res

# uf
class UnionFind:
    def __init__(self):
        self.father = {}
        self.n_sets = 0
    def find(self,x):
        root = x
        while self.father[root] != None:
            root = self.father[root]
        return root
    def merge(self,x,y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x != root_y:
            self.father[root_x] = root_y
            self.n_sets -= 1
    def add(self,x):
        if x not in self.father:
            self.father[x] = None
            self.n_sets += 1

class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        uf = UnionFind()
        for i in range(len(isConnected)):
            uf.add(i)
            for j in range(len(isConnected[i])):
                if isConnected[i][j] == 1:
                    uf.add(j)
                    uf.merge(i,j)
        return uf.n_sets
